<?xml version="1.0" encoding="utf-8" ?>

<docs>
  <header>
    <summary>
      Main service.
    </summary>
  </header>
  <method name="CanBeProcessed(string)">
    <summary>
      Estimates whether processing will succeed.
    </summary>
    <param name="Path">
      full path to the manifest file.
    </param>
    <returns>
      True: if can be processed; False: if not.
    </returns>
  </method>
  <method name="CanBeProcessed(string, string)">
    <summary>
      Estimates whether processing will succeed.
    </summary>
    <param name="AppDirectory">
      path to the application directory (there where is exe).
    </param>
    <param name="AppName">
      short application name, for example: "Application" for "Application.exe".
    </param>
    <returns>
      True: if can be processed; False: if not.
    </returns>
  </method>
  <method name="Process(string)">
    <summary>
      Processes the manifest and related data as a so-called "Ready-To" package.
    </summary>
    <param name="Path">
      full path to the manifest file.
    </param>
    <returns>
      Ready-To package.
    </returns>
  </method>
  <method name="Process(string, string)">
    <summary>
      Processes the manifest and related data as a so-called "Ready-To" package.
    </summary>
    <param name="AppDirectory">
      path to the application directory (there where is exe).
    </param>
    <param name="AppName">
      short application name, for example: "Application" for "Application.exe".
    </param>
    <returns>
      Ready-To package.
    </returns>
  </method>
  <method name="Compile(string, int, bool, bool)">
    <summary>
      Compiles a so-called "Ready-To" package.
    </summary>
    <param name="AppName">
      the name of the application, for example: "firefox".
    </param>
    <param name="BackgroundColor">
      RGB stored in int.
    </param>
    <param name="LightForegroundText">
      Light or Dark?
    </param>
    <param name="ShowNameOnSquare150x150Logo">
      On or Off?
    </param>
    <returns>
      Ready-To package.
    </returns>
  </method>
  <method name="Compile(string, int, bool, bool, byte[], byte[], string, string, string, string)">
    <summary>
      Compiles a so-called "Ready-To" package.
    </summary>
    <param name="AppName">
      the name of the application, for example: "firefox".
    </param>
    <param name="BackgroundColor">
      RGB stored in int.
    </param>
    <param name="LightForegroundText">
      Light or Dark?
    </param>
    <param name="ShowNameOnSquare150x150Logo">
      On or Off?
    </param>
    <param name="Square70x70LogoData">
      max200KB; max1024x1024px; jpg/png/gif - Microsoft - but it is not true (u can test size and resolution).
    </param>
    <param name="Square150x150LogoData">
      max200KB; max1024x1024px; jpg/png/gif - Microsoft - but it is not true (u can test size and resolution).
    </param>
    <param name="Square70x70LogoName">
      short name.
    </param>
    <param name="Square150x150LogoName">
      short name.
    </param>
    <param name="Square70x70LogoFormat">
      format without dot, for exmaple: "png".
    </param>
    <param name="Square150x150LogoFormat">
      format without dot, for exmaple: "png".
    </param>
    <returns>
      Ready-To package.
    </returns>
  </method>
  <method name="Compile(string, int, bool, bool, byte[], byte[], string, string, string, string, string, string)">
    <summary>
      Compiles a so-called "Ready-To" package.
    </summary>
    <param name="AppName">
      the name of the application, for example: "firefox".
    </param>
    <param name="BackgroundColor">
      RGB stored in int.
    </param>
    <param name="LightForegroundText">
      Light or Dark?
    </param>
    <param name="ShowNameOnSquare150x150Logo">
      On or Off?
    </param>
    <param name="Square70x70LogoData">
      max200KB; max1024x1024px; jpg/png/gif - Microsoft - but it is not true (u can test size and resolution).
    </param>
    <param name="Square150x150LogoData">
      max200KB; max1024x1024px; jpg/png/gif - Microsoft - but it is not true (u can test size and resolution).
    </param>
    <param name="Square70x70LogoName">
      short name.
    </param>
    <param name="Square150x150LogoName">
      short name.
    </param>
    <param name="Square70x70LogoFormat">
      format without dot, for exmaple: "png".
    </param>
    <param name="Square150x150LogoFormat">
      format without dot, for exmaple: "png".
    </param>
    <param name="Square70x70LogoDirectoryPath">
      relative path to image directory, example: "app-resources\images".
    </param>
    <param name="Square150x150LogoDirectoryPath">
      relative path to image directory, example: "app-resources\images".
    </param>
    <returns>
      Ready-To package.
    </returns>
  </method>
  <method name="Compile(string, int, bool, bool, byte[], byte[], bool, string, string)">
    <summary>
      Compiles a so-called "Ready-To" package.
    </summary>
    <param name="AppName">
      the name of the application, for example: "firefox".
    </param>
    <param name="BackgroundColor">
      RGB stored in int.
    </param>
    <param name="LightForegroundText">
      Light or Dark?
    </param>
    <param name="ShowNameOnSquare150x150Logo">
      On or Off?
    </param>
    <param name="Square70x70LogoData">
      max200KB; max1024x1024px; jpg/png/gif - Microsoft - but it is not true (u can test size and resolution).
    </param>
    <param name="Square150x150LogoData">
      max200KB; max1024x1024px; jpg/png/gif - Microsoft - but it is not true (u can test size and resolution).
    </param>
    <param name="AutodetectFormat">
      [recommended]  the image format will be detected by a binary signature.
    </param>
    <param name="Square70x70LogoName">
      AutodetectFormat? short name : full name.
    </param>
    <param name="Square150x150LogoName">
      AutodetectFormat? short name : full name.
    </param>
    <returns>
      Ready-To package.
    </returns>
  </method>
  <method name="Compile(string, int, bool, bool, byte[], byte[], bool, string, string, string, string)">
    <summary>
      Compiles a so-called "Ready-To" package.
    </summary>
    <param name="AppName">
      the name of the application, for example: "Firefox".
    </param>
    <param name="BackgroundColor">
      RGB stored in int.
    </param>
    <param name="LightForegroundText">
      Light or Dark?
    </param>
    <param name="ShowNameOnSquare150x150Logo">
      On or Off?
    </param>
    <param name="Square70x70LogoData">
      max200KB; max1024x1024px; jpg/png/gif - Microsoft - but it is not true (u can test size and resolution).
    </param>
    <param name="Square150x150LogoData">
      max200KB; max1024x1024px; jpg/png/gif - Microsoft - but it is not true (u can test size and resolution).
    </param>
    <param name="AutodetectFormat">
      [recommended]  the image format will be detected by a binary signature.
    </param>
    <param name="Square70x70LogoName">
      AutodetectFormat? short name : full name.
    </param>
    <param name="Square150x150LogoName">
      AutodetectFormat? short name : full name.
    </param>
    <param name="Square70x70LogoDirectoryPath">
      relative path to image directory, example: "app-resources\images".
    </param>
    <param name="Square150x150LogoDirectoryPath">
      relative path to image directory, example: "app-resources\images".
    </param>
    <returns>
      Ready-To package.
    </returns>
  </method>
  <method name="Decompile(ManifestRTCompilationResult CompilationResult)">
    <summary>
      Decompiles the compiled data to composite data.
    </summary>
    <param name="CompilationResult">
      ready-to package created from the compilation process.
    </param>
    <returns>
      Composite data.
    </returns>
  </method>
  <method name="Decompile(ManifestRTProcessingResult ProcessingResult)">
    <summary>
      Decompiles the compiled data to composite data.
    </summary>
    <param name="ProcessingResult">
      ready-to package created from the processing process.
    </param>
    <returns>
      Composite data.
    </returns>
  </method>
</docs>